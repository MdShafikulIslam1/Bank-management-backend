generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String      @id @default(uuid())
  user_name            String      @unique
  email                String      @unique
  password             String
  role                 UserRole    @default(CUSTOMER)
  full_name            String
  address              String?
  designation          BankRole    @default(CUSTOMER)
  primary_phone_number String
  profile_image        String?
  is_valid             Boolean     @default(false)
  account_balance      Float       @default(0.00)
  account_type         AccountType @default(SAVINGS_ACCOUNT)
  cards                Card[]
  // loans           Loan[]
  deposits             Deposit[]

  withdrawals  Withdrawal[]
  created_at   DateTime      @default(now())
  update_at    DateTime      @updatedAt
  transactions Transaction[]

  transfersSent     Transfer[] @relation("Sender")
  transfersReceived Transfer[] @relation("Receiver")

  @@map("users")
}

model Withdrawal {
  id          String @id @default(uuid())
  amount      Float  @default(0.00)
  rest_amount Float  @default(0.00)

  user_id String
  user    User   @relation(fields: [user_id], references: [id])

  created_at DateTime @default(now())
  update_at  DateTime @updatedAt

  @@map("withdrawals")
}

// Deposits Table
model Deposit {
  id           String @id @default(uuid())
  amount       Float  @default(0.00)
  total_amount Float  @default(0.00)

  user_id    String
  user       User     @relation(fields: [user_id], references: [id])
  created_at DateTime @default(now())
  update_at  DateTime @updatedAt

  @@map("deposits")
}

model Transaction {
  id               String          @id @default(uuid())
  transaction_type TransactionType @default(DEPOSIT)
  amount           Float           @default(0.00)

  user_id String
  user    User   @relation(fields: [user_id], references: [id])

  created_at DateTime @default(now())
  update_at  DateTime @updatedAt

  @@map("transactions")
}

model Transfer {
  id     String @id @default(uuid())
  amount Float  @default(0.00)

  sender_id String
  sender    User   @relation("Sender", fields: [sender_id], references: [id])

  receiver_id String
  receiver    User   @relation("Receiver", fields: [receiver_id], references: [id])

  created_at DateTime @default(now())
  update_at  DateTime @updatedAt

  @@map("transfers")
}

model Card {
  id              String   @id @default(uuid())
  card_type       CardType @default(CREDIT)
  card_number     String
  expiration_date String
  cvv             String

  user_id String
  user    User   @relation(fields: [user_id], references: [id])

  created_at DateTime @default(now())
  update_at  DateTime @updatedAt

  @@map("cards")
}

enum AccountType {
  BUSINESS_ACCOUNT
  STUDENT_ACCOUNT
  CURRENT_ACCOUNT
  SAVINGS_ACCOUNT
}

enum UserRole {
  CUSTOMER
  ADMIN
}

enum BankRole {
  CUSTOMER
  BANK_TELLER
  CUSTOMER_SERVICE_REPRESENTATIVE
  LOAN_OFFICER
  BRANCH_MANAGER
  RELATIONSHIP_MANAGER
  RISK_MANAGER
  COMPLIANCE_OFFICER
  IT_PERSONNEL
  INTERNAL_AUDITOR
  CFO
  BOARD_OF_DIRECTORS
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  TRANSFER
  LOAN
}

enum CardType {
  CREDIT
  DEBIT
  VISA
  MASTER
}

enum GenderTerm {
  MALE
  FEMALE
  OTHERS
}
